buildscript {
  ext {
    kotlinVersion = '2.1.10'
    roboVMVersion = '2.3.20'
    gdxVersion = '1.13.1'
    ktxVersion = '1.13.1-rc1'
    kotlinxCoroutinesVersion = '1.10.1'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://jitpack.io" }
    google()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
    classpath "com.mobidevelop.robovm:robovm-gradle-plugin:$roboVMVersion"
  }
}

allprojects {
  apply plugin: "eclipse"
  apply plugin: "idea"

  version = '1.0'
  ext {
    appName = "exodus-game"
    gdxVersion = '1.13.1'
    roboVMVersion = '2.3.20'
    box2DLightsVersion = '1.5'
    ashleyVersion = '1.7.4'
    aiVersion = '1.8.2'
    gdxControllersVersion = '2.2.1'
  }

  configurations.all {
    resolutionStrategy {
      force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
      force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
      force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
      force "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
      force "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
      force "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    google()
    gradlePluginPortal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://jitpack.io" }
  }

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 17
  targetCompatibility = 17

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

project(":ios") {
  apply plugin: "kotlin"
  apply plugin: "robovm"

  dependencies {
    implementation project(":core")
    api "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
    api "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
    api "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
    api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
  }
}

project(":lwjgl3") {
  apply plugin: "kotlin"
  apply plugin: "application"

  dependencies {
    implementation project(":core")
    api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }
}
